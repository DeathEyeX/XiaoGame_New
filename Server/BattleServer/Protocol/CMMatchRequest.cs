// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CMMatchRequest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from CMMatchRequest.proto</summary>
  public static partial class CMMatchRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for CMMatchRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CMMatchRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRDTU1hdGNoUmVxdWVzdC5wcm90bxIHbWVzc2FnZSJDCg5DTU1hdGNoUmVx",
            "dWVzdBIOCgZnYW1lSUQYASABKAUSEAoIZ2FtZU1vZGUYAiABKAUSDwoHZ3Jv",
            "dXBJRBgDIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.CMMatchRequest), global::Message.CMMatchRequest.Parser, new[]{ "GameID", "GameMode", "GroupID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端 -> 主服 开始游戏请求
  /// </summary>
  public sealed partial class CMMatchRequest : pb::IMessage<CMMatchRequest> {
    private static readonly pb::MessageParser<CMMatchRequest> _parser = new pb::MessageParser<CMMatchRequest>(() => new CMMatchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.CMMatchRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMMatchRequest(CMMatchRequest other) : this() {
      gameID_ = other.gameID_;
      gameMode_ = other.gameMode_;
      groupID_ = other.groupID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMMatchRequest Clone() {
      return new CMMatchRequest(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private int gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "gameMode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private int gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 3;
    private int groupID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (GameMode != other.GameMode) return false;
      if (GroupID != other.GroupID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (GameMode != 0) hash ^= GameMode.GetHashCode();
      if (GroupID != 0) hash ^= GroupID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameID);
      }
      if (GameMode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameMode);
      }
      if (GroupID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (GroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.GameMode != 0) {
        GameMode = other.GameMode;
      }
      if (other.GroupID != 0) {
        GroupID = other.GroupID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadInt32();
            break;
          }
          case 16: {
            GameMode = input.ReadInt32();
            break;
          }
          case 24: {
            GroupID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
