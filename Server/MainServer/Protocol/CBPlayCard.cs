// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBPlayCard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from CBPlayCard.proto</summary>
  public static partial class CBPlayCardReflection {

    #region Descriptor
    /// <summary>File descriptor for CBPlayCard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CBPlayCardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDQlBsYXlDYXJkLnByb3RvEgdtZXNzYWdlIj4KCkNCUGxheUNhcmQSDgoG",
            "Y2FyZElEGAEgASgFEhAKCHRhcmdldElEGAIgASgFEg4KBmV4dGVuZBgDIAEo",
            "BWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.CBPlayCard), global::Message.CBPlayCard.Parser, new[]{ "CardID", "TargetID", "Extend" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CBPlayCard : pb::IMessage<CBPlayCard> {
    private static readonly pb::MessageParser<CBPlayCard> _parser = new pb::MessageParser<CBPlayCard>(() => new CBPlayCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBPlayCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.CBPlayCardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayCard(CBPlayCard other) : this() {
      cardID_ = other.cardID_;
      targetID_ = other.targetID_;
      extend_ = other.extend_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayCard Clone() {
      return new CBPlayCard(this);
    }

    /// <summary>Field number for the "cardID" field.</summary>
    public const int CardIDFieldNumber = 1;
    private int cardID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardID {
      get { return cardID_; }
      set {
        cardID_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private int targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "extend" field.</summary>
    public const int ExtendFieldNumber = 3;
    private int extend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Extend {
      get { return extend_; }
      set {
        extend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBPlayCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBPlayCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardID != other.CardID) return false;
      if (TargetID != other.TargetID) return false;
      if (Extend != other.Extend) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardID != 0) hash ^= CardID.GetHashCode();
      if (TargetID != 0) hash ^= TargetID.GetHashCode();
      if (Extend != 0) hash ^= Extend.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardID);
      }
      if (TargetID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetID);
      }
      if (Extend != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Extend);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardID);
      }
      if (TargetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetID);
      }
      if (Extend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Extend);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBPlayCard other) {
      if (other == null) {
        return;
      }
      if (other.CardID != 0) {
        CardID = other.CardID;
      }
      if (other.TargetID != 0) {
        TargetID = other.TargetID;
      }
      if (other.Extend != 0) {
        Extend = other.Extend;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardID = input.ReadInt32();
            break;
          }
          case 16: {
            TargetID = input.ReadInt32();
            break;
          }
          case 24: {
            Extend = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
