// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBReconnectReply.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from CBReconnectReply.proto</summary>
  public static partial class CBReconnectReplyReflection {

    #region Descriptor
    /// <summary>File descriptor for CBReconnectReply.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CBReconnectReplyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZDQlJlY29ubmVjdFJlcGx5LnByb3RvEgdtZXNzYWdlGgtJbmZvcy5wcm90",
            "byL8AQoQQ0JSZWNvbm5lY3RSZXBseRIpCghyb29tSW5mbxgBIAEoCzIXLm1l",
            "c3NhZ2UuQmF0dGxlUm9vbUluZm8SIAoFY2FyZHMYAiADKAsyES5tZXNzYWdl",
            "LkNhcmRJbmZvEi4KC3BsYXllckluZm9zGAMgAygLMhkubWVzc2FnZS5CYXR0",
            "bGVQbGF5ZXJJbmZvEhEKCXJvb21TdGF0ZRgEIAEoBRIRCgl3aG9zZVR1cm4Y",
            "BSABKAUSFQoNbGVmdENhcmRDb3VudBgGIAEoBRIUCgxsZWZ0VHVyblRpbWUY",
            "ByABKAISGAoQbGFzdFBsYXllZENhcmRJZBgIIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Message.InfosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.CBReconnectReply), global::Message.CBReconnectReply.Parser, new[]{ "RoomInfo", "Cards", "PlayerInfos", "RoomState", "WhoseTurn", "LeftCardCount", "LeftTurnTime", "LastPlayedCardId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 客户端 -> 战场 重连返回数据
  /// </summary>
  public sealed partial class CBReconnectReply : pb::IMessage<CBReconnectReply> {
    private static readonly pb::MessageParser<CBReconnectReply> _parser = new pb::MessageParser<CBReconnectReply>(() => new CBReconnectReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBReconnectReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.CBReconnectReplyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBReconnectReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBReconnectReply(CBReconnectReply other) : this() {
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      cards_ = other.cards_.Clone();
      playerInfos_ = other.playerInfos_.Clone();
      roomState_ = other.roomState_;
      whoseTurn_ = other.whoseTurn_;
      leftCardCount_ = other.leftCardCount_;
      leftTurnTime_ = other.leftTurnTime_;
      lastPlayedCardId_ = other.lastPlayedCardId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBReconnectReply Clone() {
      return new CBReconnectReply(this);
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Message.BattleRoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Message.BattleRoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.CardInfo> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Message.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::Message.CardInfo> cards_ = new pbc::RepeatedField<global::Message.CardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Message.CardInfo> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.BattlePlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Message.BattlePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Message.BattlePlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Message.BattlePlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Message.BattlePlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    /// <summary>Field number for the "roomState" field.</summary>
    public const int RoomStateFieldNumber = 4;
    private int roomState_;
    /// <summary>
    /// 1 - wait others, 2 - game, 3 - end
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomState {
      get { return roomState_; }
      set {
        roomState_ = value;
      }
    }

    /// <summary>Field number for the "whoseTurn" field.</summary>
    public const int WhoseTurnFieldNumber = 5;
    private int whoseTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WhoseTurn {
      get { return whoseTurn_; }
      set {
        whoseTurn_ = value;
      }
    }

    /// <summary>Field number for the "leftCardCount" field.</summary>
    public const int LeftCardCountFieldNumber = 6;
    private int leftCardCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCardCount {
      get { return leftCardCount_; }
      set {
        leftCardCount_ = value;
      }
    }

    /// <summary>Field number for the "leftTurnTime" field.</summary>
    public const int LeftTurnTimeFieldNumber = 7;
    private float leftTurnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftTurnTime {
      get { return leftTurnTime_; }
      set {
        leftTurnTime_ = value;
      }
    }

    /// <summary>Field number for the "lastPlayedCardId" field.</summary>
    public const int LastPlayedCardIdFieldNumber = 8;
    private int lastPlayedCardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedCardId {
      get { return lastPlayedCardId_; }
      set {
        lastPlayedCardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBReconnectReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBReconnectReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      if (RoomState != other.RoomState) return false;
      if (WhoseTurn != other.WhoseTurn) return false;
      if (LeftCardCount != other.LeftCardCount) return false;
      if (LeftTurnTime != other.LeftTurnTime) return false;
      if (LastPlayedCardId != other.LastPlayedCardId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (RoomState != 0) hash ^= RoomState.GetHashCode();
      if (WhoseTurn != 0) hash ^= WhoseTurn.GetHashCode();
      if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
      if (LeftTurnTime != 0F) hash ^= LeftTurnTime.GetHashCode();
      if (LastPlayedCardId != 0) hash ^= LastPlayedCardId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (RoomState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomState);
      }
      if (WhoseTurn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WhoseTurn);
      }
      if (LeftCardCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftCardCount);
      }
      if (LeftTurnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LeftTurnTime);
      }
      if (LastPlayedCardId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastPlayedCardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (RoomState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomState);
      }
      if (WhoseTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhoseTurn);
      }
      if (LeftCardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
      }
      if (LeftTurnTime != 0F) {
        size += 1 + 4;
      }
      if (LastPlayedCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastPlayedCardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBReconnectReply other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Message.BattleRoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      cards_.Add(other.cards_);
      playerInfos_.Add(other.playerInfos_);
      if (other.RoomState != 0) {
        RoomState = other.RoomState;
      }
      if (other.WhoseTurn != 0) {
        WhoseTurn = other.WhoseTurn;
      }
      if (other.LeftCardCount != 0) {
        LeftCardCount = other.LeftCardCount;
      }
      if (other.LeftTurnTime != 0F) {
        LeftTurnTime = other.LeftTurnTime;
      }
      if (other.LastPlayedCardId != 0) {
        LastPlayedCardId = other.LastPlayedCardId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Message.BattleRoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 26: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 32: {
            RoomState = input.ReadInt32();
            break;
          }
          case 40: {
            WhoseTurn = input.ReadInt32();
            break;
          }
          case 48: {
            LeftCardCount = input.ReadInt32();
            break;
          }
          case 61: {
            LeftTurnTime = input.ReadFloat();
            break;
          }
          case 64: {
            LastPlayedCardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
