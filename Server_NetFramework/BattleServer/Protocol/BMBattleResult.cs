// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMBattleResult.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from BMBattleResult.proto</summary>
  public static partial class BMBattleResultReflection {

    #region Descriptor
    /// <summary>File descriptor for BMBattleResult.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BMBattleResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRCTUJhdHRsZVJlc3VsdC5wcm90bxIHbWVzc2FnZSJUCg5CTUJhdHRsZVJl",
            "c3VsdBIOCgZyb29tSUQYASABKAUSMgoJcmFua1VzZXJzGAIgAygLMh8ubWVz",
            "c2FnZS5CTUJhdHRsZVJlc3VsdFVzZXJJbmZvIncKFkJNQmF0dGxlUmVzdWx0",
            "VXNlckluZm8SCwoDdWlkGAEgASgDEhAKCHBsYXllcklEGAIgASgFEhIKCnBs",
            "YXllck5hbWUYAyABKAkSDQoFc2NvcmUYBCABKAUSDAoEaXNBSRgFIAEoCBIN",
            "CgVpc091dBgGIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.BMBattleResult), global::Message.BMBattleResult.Parser, new[]{ "RoomID", "RankUsers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.BMBattleResultUserInfo), global::Message.BMBattleResultUserInfo.Parser, new[]{ "Uid", "PlayerID", "PlayerName", "Score", "IsAI", "IsOut" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 战场 -> 主服 登录请求
  /// </summary>
  public sealed partial class BMBattleResult : pb::IMessage<BMBattleResult> {
    private static readonly pb::MessageParser<BMBattleResult> _parser = new pb::MessageParser<BMBattleResult>(() => new BMBattleResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BMBattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.BMBattleResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResult(BMBattleResult other) : this() {
      roomID_ = other.roomID_;
      rankUsers_ = other.rankUsers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResult Clone() {
      return new BMBattleResult(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "rankUsers" field.</summary>
    public const int RankUsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.BMBattleResultUserInfo> _repeated_rankUsers_codec
        = pb::FieldCodec.ForMessage(18, global::Message.BMBattleResultUserInfo.Parser);
    private readonly pbc::RepeatedField<global::Message.BMBattleResultUserInfo> rankUsers_ = new pbc::RepeatedField<global::Message.BMBattleResultUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Message.BMBattleResultUserInfo> RankUsers {
      get { return rankUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BMBattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BMBattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if(!rankUsers_.Equals(other.rankUsers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= rankUsers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      rankUsers_.WriteTo(output, _repeated_rankUsers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      size += rankUsers_.CalculateSize(_repeated_rankUsers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BMBattleResult other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      rankUsers_.Add(other.rankUsers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            rankUsers_.AddEntriesFrom(input, _repeated_rankUsers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BMBattleResultUserInfo : pb::IMessage<BMBattleResultUserInfo> {
    private static readonly pb::MessageParser<BMBattleResultUserInfo> _parser = new pb::MessageParser<BMBattleResultUserInfo>(() => new BMBattleResultUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BMBattleResultUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.BMBattleResultReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResultUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResultUserInfo(BMBattleResultUserInfo other) : this() {
      uid_ = other.uid_;
      playerID_ = other.playerID_;
      playerName_ = other.playerName_;
      score_ = other.score_;
      isAI_ = other.isAI_;
      isOut_ = other.isOut_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BMBattleResultUserInfo Clone() {
      return new BMBattleResultUserInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 2;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "isAI" field.</summary>
    public const int IsAIFieldNumber = 5;
    private bool isAI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAI {
      get { return isAI_; }
      set {
        isAI_ = value;
      }
    }

    /// <summary>Field number for the "isOut" field.</summary>
    public const int IsOutFieldNumber = 6;
    private bool isOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOut {
      get { return isOut_; }
      set {
        isOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BMBattleResultUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BMBattleResultUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerID != other.PlayerID) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Score != other.Score) return false;
      if (IsAI != other.IsAI) return false;
      if (IsOut != other.IsOut) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (IsAI != false) hash ^= IsAI.GetHashCode();
      if (IsOut != false) hash ^= IsOut.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerID);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
      if (IsAI != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAI);
      }
      if (IsOut != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (IsAI != false) {
        size += 1 + 1;
      }
      if (IsOut != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BMBattleResultUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.IsAI != false) {
        IsAI = other.IsAI;
      }
      if (other.IsOut != false) {
        IsOut = other.IsOut;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
          case 40: {
            IsAI = input.ReadBool();
            break;
          }
          case 48: {
            IsOut = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
