// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using Coolfish.System;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace message {

  /// <summary>Holder for reflection information generated from Login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMb2dpbi5wcm90bxIHbWVzc2FnZSI9CgVMb2dpbhIQCghkZXZpY2VJRBgB",
            "IAEoBRIQCgh1c2VybmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::message.Login), global::message.Login.Parser, new[]{ "deviceID", "username", "password" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///client login
  /// </summary>
  public sealed partial class Login : pb::IMessage<Login> {
    private static readonly pb::MessageParser<Login> _parser = new pb::MessageParser<Login>(() => new Login());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::message.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login(Login other) : this() {
      deviceID_ = other.deviceID_;
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login Clone() {
      return new Login(this);
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int deviceIDFieldNumber = 1;
    private int deviceID_;
    /// <summary>
    /// device identify
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int @deviceID {
      get { return deviceID_; }
      set {
        deviceID_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int usernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string @username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int passwordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string @password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (@deviceID != other.@deviceID) return false;
      if (@username != other.@username) return false;
      if (@password != other.@password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (@deviceID != 0) hash ^= @deviceID.GetHashCode();
      if (@username.Length != 0) hash ^= @username.GetHashCode();
      if (@password.Length != 0) hash ^= @password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (@deviceID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(@deviceID);
      }
      if (@username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(@username);
      }
      if (@password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(@password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (@deviceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(@deviceID);
      }
      if (@username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(@username);
      }
      if (@password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(@password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login other) {
      if (other == null) {
        return;
      }
      if (other.@deviceID != 0) {
        @deviceID = other.@deviceID;
      }
      if (other.@username.Length != 0) {
        @username = other.@username;
      }
      if (other.@password.Length != 0) {
        @password = other.@password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            @deviceID = input.ReadInt32();
            break;
          }
          case 18: {
            @username = input.ReadString();
            break;
          }
          case 26: {
            @password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
