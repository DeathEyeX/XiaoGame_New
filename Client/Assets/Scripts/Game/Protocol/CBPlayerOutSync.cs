// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBPlayerOutSync.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from CBPlayerOutSync.proto</summary>
  public static partial class CBPlayerOutSyncReflection {

    #region Descriptor
    /// <summary>File descriptor for CBPlayerOutSync.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CBPlayerOutSyncReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVDQlBsYXllck91dFN5bmMucHJvdG8SB21lc3NhZ2UiNwoPQ0JQbGF5ZXJP",
            "dXRTeW5jEhAKCHBsYXllcklEGAEgASgFEhIKCmhhbmRDYXJkSUQYAiABKAVi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.CBPlayerOutSync), global::Message.CBPlayerOutSync.Parser, new[]{ "PlayerID", "HandCardID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CBPlayerOutSync : pb::IMessage<CBPlayerOutSync> {
    private static readonly pb::MessageParser<CBPlayerOutSync> _parser = new pb::MessageParser<CBPlayerOutSync>(() => new CBPlayerOutSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBPlayerOutSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.CBPlayerOutSyncReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayerOutSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayerOutSync(CBPlayerOutSync other) : this() {
      playerID_ = other.playerID_;
      handCardID_ = other.handCardID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBPlayerOutSync Clone() {
      return new CBPlayerOutSync(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "handCardID" field.</summary>
    public const int HandCardIDFieldNumber = 2;
    private int handCardID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandCardID {
      get { return handCardID_; }
      set {
        handCardID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBPlayerOutSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBPlayerOutSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (HandCardID != other.HandCardID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (HandCardID != 0) hash ^= HandCardID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (HandCardID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HandCardID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (HandCardID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandCardID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBPlayerOutSync other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.HandCardID != 0) {
        HandCardID = other.HandCardID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            HandCardID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
