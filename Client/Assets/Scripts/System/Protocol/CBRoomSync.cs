// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBRoomSync.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from CBRoomSync.proto</summary>
  public static partial class CBRoomSyncReflection {

    #region Descriptor
    /// <summary>File descriptor for CBRoomSync.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CBRoomSyncReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDQlJvb21TeW5jLnByb3RvEgdtZXNzYWdlIi4KCkNCUm9vbVN5bmMSDQoF",
            "c3RhdGUYASABKAUSEQoJd2hvc2VUdXJuGAIgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Message.CBRoomSync), global::Message.CBRoomSync.Parser, new[]{ "State", "WhoseTurn" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 主服 -> 客户端  房间状态同步
  /// </summary>
  public sealed partial class CBRoomSync : pb::IMessage<CBRoomSync> {
    private static readonly pb::MessageParser<CBRoomSync> _parser = new pb::MessageParser<CBRoomSync>(() => new CBRoomSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBRoomSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.CBRoomSyncReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBRoomSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBRoomSync(CBRoomSync other) : this() {
      state_ = other.state_;
      whoseTurn_ = other.whoseTurn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBRoomSync Clone() {
      return new CBRoomSync(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    /// 1 - wait others, 2 - game, 3 - end
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "whoseTurn" field.</summary>
    public const int WhoseTurnFieldNumber = 2;
    private int whoseTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WhoseTurn {
      get { return whoseTurn_; }
      set {
        whoseTurn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBRoomSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBRoomSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (WhoseTurn != other.WhoseTurn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (WhoseTurn != 0) hash ^= WhoseTurn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (WhoseTurn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WhoseTurn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (WhoseTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhoseTurn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBRoomSync other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.WhoseTurn != 0) {
        WhoseTurn = other.WhoseTurn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            WhoseTurn = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
